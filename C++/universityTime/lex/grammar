
S 	 -> INFUN | DECL | COND | CYCLE | EQUA

INFUN-> //inline functions (p43)

DECL ->	int <t_word> ; | int <t_word> [STAT] ; //push in var list
COND ->	if STAT then { S }
CYCLE->	for <t_word> from STAT to STAT { S }
STAT ->	<t_word> OPER | <t_word> ALG | 
			<t_number> OPER | <t_number> ALG
EQUA -> <t_word> = STAT;

		//problem with unary operation -> sol: another statement
OPER ->	<t_oper> <t_word> OPER | <t_oper> <t_number> OPER | eps
ALG  ->	<t_algebra> <t_word> ALG | <t_algebra> <t_number> | eps





t_oper: > >= < <= == != ! =

t_algebra: + - * / %